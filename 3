def compute_transition_function(pattern, alphabet):
    m = len(pattern)
    transition = [{} for _ in range(m + 1)]
    for q in range(m + 1):
        for char in alphabet:
            k = min(m, q + 1)
            while k > 0 and pattern[:k] != (pattern[:q] + char)[-k:]:
                k -= 1
            transition[q][char] = k
    return transition
def finite_automaton_matcher(text, pattern):
    n = len(text)
    m = len(pattern)
    alphabet = set(text)
    transition = compute_transition_function(pattern, alphabet)
    q = 0
    result = []
    for i in range(n):
        if text[i] in transition[q]:
            q = transition[q][text[i]]
        else:
            q = 0

        if q == m:
            result.append(i - m + 1)
    return result
# Пример использования
text = "ababcababac"
pattern = "ababac"
print(finite_automaton_matcher(text, pattern))  # Output: [5]
