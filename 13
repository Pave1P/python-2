def bin_packing_dp(items, bin_capacity):
    n = len(items)
    # dp[mask] - минимальное количество ящиков, необходимых для упаковки предметов в mask
    dp = [float('inf')] * (1 << n)
    dp[0] = 0  # базовый случай: 0 предметов - 0 ящиков

    # remaining[mask] - оставшаяся вместимость в последнем ящике для mask
    remaining = [0] * (1 << n)

    for mask in range(1 << n):
        if dp[mask] == float('inf'):
            continue

        for i in range(n):
            if not (mask & (1 << i)): # проверяем, есть ли i-й предмет в текущей маске
                new_mask = mask | (1 << i) # новая маска, в которую добавили i-й предмет

                # Вариант 1: предмет помещается в текущий ящик
                if remaining[mask] >= items[i]:
                    # Помещаем предмет в текущий ящик
                    if dp[new_mask] > dp[mask] or \
                            (dp[new_mask] == dp[mask] and remaining[new_mask] < remaining[mask] - items[i]):
                        dp[new_mask] = dp[mask]
                        remaining[new_mask] = remaining[mask] - items[i]

                # Вариант 2: предмет не помещается — открываем новый ящик
                else:
                    # Открываем новый ящик
                    if dp[new_mask] > dp[mask] + 1 or \
                            (dp[new_mask] == dp[mask] + 1 and remaining[new_mask] < bin_capacity - items[i]):
                        dp[new_mask] = dp[mask] + 1
                        remaining[new_mask] = bin_capacity - items[i]


    return (dp[(1 << n) - 1])


# Пример использования
items = [2, 5, 4, 7, 1, 3, 8]
bin_capacity = 10
min_bins = bin_packing_dp(items, bin_capacity)
print(f"Минимальное количество ящиков: {min_bins}")
