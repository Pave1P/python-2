def compute_transition_function(pattern, alphabet):
    """Создает таблицу переходов конечного автомата"""
    m = len(pattern)
    transition = [{ch: 0 for ch in alphabet} for _ in range(m + 1)]

    for state in range(m + 1):
        for ch in alphabet:
            # Определяем следующее состояние
            prefix = pattern[:state] + ch
            next_state = 0
            for i in range(min(m, state + 1), 0, -1):
                if pattern[:i] == prefix[-i:]:
                    next_state = i
                    break
            transition[state][ch] = next_state
    return transition

def finite_automaton_search(text, pattern):
    """Поиск подстроки в тексте с использованием конечного автомата"""
    alphabet = set(text)  # Определяем алфавит из текста
    transition = compute_transition_function(pattern, alphabet)
    
    m = len(pattern)
    state = 0
    result = []

    for i, ch in enumerate(text):
        state = transition[state].get(ch, 0)  # Переход в следующее состояние
        if state == m:
            result.append(i - m + 1)  # Нашли вхождение шаблона

    return result

# Пример использования
text = "ababcabcabababd"
pattern = "ababd"
positions = finite_automaton_search(text, pattern)
print("Образец найден в позициях:", positions)
