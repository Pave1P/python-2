def find_critical_floor(max_floor, eggs):
    """
    Функция для нахождения критического этажа в здании с заданным количеством этажей и яиц.
    
    :param max_floor: Количество этажей в здании (в данной задаче 100).
    :param eggs: Количество яиц (в данной задаче 2).
    :return: Критический этаж N и количество бросков.
    """
    # Начальный шаг определяется как минимальное k, при котором сумма k + (k-1) + ... + 1 >= max_floor
    # Это можно вычислить по формуле суммы арифметической прогрессии: k*(k+1)/2 >= max_floor
    k = 1
    while k * (k + 1) // 2 < max_floor:
        k += 1

    # Инициализация переменных
    current_floor = k  # Текущий этаж, с которого бросаем яйцо
    step = k - 1       # Шаг уменьшается на 1 после каждого броска
    throws = 0         # Счетчик бросков

    # Первая фаза: бросаем первое яйцо с текущего этажа
    while eggs > 1 and current_floor <= max_floor:
        throws += 1
        print(f"Бросок {throws}: бросаем яйцо с {current_floor}-го этажа.")

        # Предположим, что яйцо разбилось (в реальной задаче это нужно проверять)
        # В данном примере мы просто ищем критический этаж, поэтому считаем, что яйцо разбилось
        # на текущем этаже или выше.
        # В реальной задаче нужно было бы проверять результат броска.

        # Если яйцо разбилось, переходим ко второй фазе
        if current_floor >= max_floor:
            break

        # Если яйцо не разбилось, поднимаемся на следующий этаж с уменьшенным шагом
        current_floor += step
        step -= 1

    # Вторая фаза: используем второе яйцо для линейного поиска
    # Начинаем с последнего успешного этажа + 1 и проверяем каждый этаж до текущего
    start_floor = current_floor - step if step > 0 else 1
    for floor in range(start_floor, current_floor + 1):
        throws += 1
        print(f"Бросок {throws}: бросаем второе яйцо с {floor}-го этажа.")

        # Предположим, что яйцо разбилось на текущем этаже
        # В реальной задаче нужно было бы проверять результат броска
        if floor >= max_floor:
            return floor, throws

    return max_floor, throws

# Пример использования
max_floor = 100
eggs = 2
critical_floor, throws = find_critical_floor(max_floor, eggs)
print(f"Критический этаж: {critical_floor}, количество бросков: {throws}")
